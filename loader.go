package marker

import (
	"errors"
	"go/token"
	"golang.org/x/tools/go/packages"
	"sync"
)

type Package struct {
	*packages.Package
}

type loader struct {
	config   *packages.Config
	patterns []string
	pkgs     map[*packages.Package]*Package
	pkgsMu   sync.Mutex
}

func newLoader(config *packages.Config, patterns ...string) *loader {
	return &loader{
		config:   config,
		patterns: patterns,
	}
}

func (loader *loader) load() error {
	pkgs, err := packages.Load(loader.config, loader.patterns...)

	if err != nil {
		return err
	}

	for _, pkg := range pkgs {
		// TODO wrap packages
	}

	return nil
}

func LoadPackages(patterns ...string) ([]*Package, error) {
	return LoadPackagesWithConfig(&packages.Config{}, patterns...)
}

func LoadPackagesWithConfig(config *packages.Config, patterns ...string) ([]*Package, error) {

	if config == nil {
		return nil, errors.New("config must not be nil")
	}

	config.BuildFlags = append([]string{"ignore_autogenerated", "-tags"}, config.BuildFlags...)
	config.Mode |= packages.NeedName | packages.NeedFiles | packages.NeedCompiledGoFiles | packages.NeedImports

	if config.Fset == nil {
		config.Fset = token.NewFileSet()
	}

	loader := newLoader(config, patterns...)
	loader.load()

	return nil, nil
}
